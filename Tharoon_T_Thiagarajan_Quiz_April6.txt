
Name: Tharoon T Thiagarajan
Last 4 digits ID: 1001704601
Computer IP address:
CSE 6331, Cloud Computing					


Quiz April 6, Spring 2020   (c) DL, UTA, 2020


  C&P means cut and paste only those relevant lines from your program(s) into this quiz.


 1.  I understand that I am on my honor during this quiz, I will not collaborate, use 
     non-allowed sources, and I will not discuss or share this quiz with anyone for the next 
     4 hours.
     You MAY: use Google to search, use previous source code, 
     YOU MAY NOT use:
     Email, Facebook, Hangouts, IM, chats, Skype or ANY other human connection.

     This is a timed test. Late tests will have points deducted for being late.
     Very late tests will not be graded.

     The second part of the test, you should electronically submit, you will need to copy and paste 
     only those lines of code to implement that part of the test, usually a few (two to eight) lines of code. 
     Place it immediately after the question.

     Submit this Quiz (renamed) with code cut and pasted, ONLY text. DO NOT submit zips, binaries, libraries,
     or anything other than text.

     When any parts(questions) are complete complete, submit this test, you may make multiple submissions.

 2. Get files from this same folder.
   
 3. Name your program/submission with your name and last digits of your ID.

 4. Using the cloud services provider, all functionality possible should be implemented on that provider.
    (Of course, displaying web pages through a browser and the user interface is "local")

 5. Show a web page and interface (which resides on the cloud provider) with your name and 
    student ID in large font at the top of every web page dispayed (for this quiz)
    The cloud service provider is Microsoft Azure.

Show and submit code:

 5. Please read part 5. above, again.

 6. Import the dataset into a Relational Data Base (SQL), a "hash" or an array. 
    Please note that for some parts of the following you will need to create indexes (keys) appropriately.
    You do NOT need to show us this part.

 7. Allow a user, through a web form, to give a "net" value, for example "pr", and a minimum and maximum "mag"
    value, for example 3 to 6, and in a table, show the number of quakes for that net value and for that range
    of mag, in increments of 1, that is, for this example show the number of quakes with mag from 3 to 4, 4 to 5,
    and 5 to 6, for the net value "pr". (No "visualizing", no graphing necessary).
	
	@app.route("/practise2", methods=["POST", "GET"])
	def practise2():
    	startRange = int(request.form.get('range1',''))
    	lastRange = int(request.form.get('range2',''))
    	net = str(request.form.get('net',''))
    	endRange = startRange + 1
    	storeResult = []
    	start = []
    	end = []

    	while startRange < lastRange:
        query = "Select count(*) from Earthquake where mag between '"+str(startRange)+"' and '"+str(endRange)+"' and net = '"+str(net)+"'"
        cursor.execute(query)
        resultSet = cursor.fetchall()
        countResult = resultSet[0][0]
        storeResult.append(countResult)
        start.append(startRange)
        end.append(endRange)
        startRange = endRange
        endRange = endRange + 1
    return render_template('practise2.html', start=start, end=end, storeResult=storeResult)

	<h1>1001704601</h1>
      <h1>Thiagarajan, Tharoon</h1>
      <br>

      <center>
        <p>Start: {{ start }}</p>
          <p> End: {{ end }}</p>
          <p> Count: {{ storeResult }}</p>
          
      </center>

 8. Using what was done in the previous question, showing the same web form, please show a page,
    followed by a horizontal bar chart on that page, which is at least 3/4 (75%) the width of the screen, 
    which shows the same results as the previous question. Each bar should be in a different color, 
    please show labels to the right of each bar.
@app.route("/practise2vert", methods=["POST", "GET"])
    def practise2vert():
    startRange = int(request.form.get('range1',''))
    lastRange = int(request.form.get('range2',''))
    net = str(request.form.get('net',''))
    endRange = startRange + 1
    storeResult = []
    start = []
    end = []
    counter = 0

    while startRange < lastRange:
        query = "Select count(*) from Earthquake where mag between '"+str(startRange)+"' and '"+str(endRange)+"' and net = '"+str(net)+"'"
        cursor.execute(query)
        resultSet = cursor.fetchall()
        countResult = resultSet[0][0]
        storeResult.append(countResult)
        start.append(startRange)
        end.append(endRange)
        startRange = endRange
        endRange = endRange + 1
        counter = counter + 1
    list_a = []
    list_a.append(['Mag Range', 'Number of Earthquakes'])
    for i in range(0, counter):
        list_a.append([str(start[i]) + '-' + str(end[i]),storeResult[i]])
    return render_template('practise2vert.html', start=start, end=end, storeResult=storeResult, rows = list_a)

	<center>
          <div id="barchart" style="width: 900px; height: 500px;"></div>
          <div id="columnchart" style="width: 900px; height: 500px;"></div>
      </center>

      <br>
      <br>
    </div>
        <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
        <script type="text/javascript">
          google.charts.load('current', {'packages':['corechart']});
          google.charts.setOnLoadCallback(drawChart);

          function drawChart() {

            var data = google.visualization.arrayToDataTable({{ rows|safe }});

            var options = {
                title: ' Bar chart showing Number of EarthQuakes',
                hAxis: {title: 'Number of EarthQuakes'},
                vAxis: {title: 'Mag Range'},
                colors: ['green','red','yellow','blue','violet','orange','lightgray']

            };
            var chart = new google.visualization.BarChart(document.getElementById('barchart'));

            chart.draw(data, options);

            {#Column Chart#}
          }

 9. Similar, to the previous question, please show a page, followed by a pie chart on that page, 
    which is half (50%) the width of the screen, which shows the same results as the previous question. 
    Each pie slice should be in a different color, please show labels inside each slice.
@app.route("/practise2pie", methods=["POST", "GET"])
    def practise2pie():
    startRange = int(request.form.get('range1',''))
    lastRange = int(request.form.get('range2',''))
    net = str(request.form.get('net',''))
    endRange = startRange + 1
    storeResult = []
    start = []
    end = []
    counter = 0

    while startRange < lastRange:
        query = "Select count(*) from Earthquake where mag between '"+str(startRange)+"' and '"+str(endRange)+"' and net = '"+str(net)+"'"
        cursor.execute(query)
        resultSet = cursor.fetchall()
        countResult = resultSet[0][0]
        storeResult.append(countResult)
        start.append(startRange)
        end.append(endRange)
        startRange = endRange
        endRange = endRange + 1
        counter = counter + 1
    list_a = []
    list_a.append(['Latitude Range', 'Number of Earthquakes'])
    for i in range(0, counter):
        list_a.append([str(start[i]) + '-' + str(end[i]),storeResult[i]])
    return render_template('practise2pie.html', start=start, end=end, storeResult=storeResult, rows = list_a)


	<center>
          <div id="piechart" style="width: 900px; height: 500px;"></div>
      </center>

      <br>
      <br>
    </div>
        <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
        <script type="text/javascript">
          google.charts.load('current', {'packages':['corechart']});
          google.charts.setOnLoadCallback(drawChart);

          function drawChart() {

            var data = google.visualization.arrayToDataTable({{ rows|safe }});

            var options = {
                title: ' Pie chart showing Number of EarthQuakes',
                pieSliceText: 'value',
                legend: {position: 'labeled'}
                {#colors: ['yellow','lightgray','orange']#}
            };
            var chart = new google.visualization.PieChart(document.getElementById('piechart'));

            chart.draw(data, options);
          }
        </script>

 10. Allow a user, through a web form, to give a "net" value, for example "pr", and a minimum and maximum "nst" range, 
     for example 10 to 18, and show a point chart (scatter chart) where the x axis are nst values, and the y axis are gap values,
     please label the x and y axis. If the gap values are all greater than some minimum (for this example there are no gap values
     less than 100), please re-origin the axis, DO NOT start at point 0,0 at the bottom left, you can origin at the minimum nst
     and gap values, or some values "close" to those.)
	
@app.route("/practise3", methods=["POST", "GET"])
    def practise3():
    net = request.form.get('net','')
    maxNst = int(request.form.get('range1',''))
    minNst = int(request.form.get('range2',''))

    query = "Select nst, gap from Earthquake where net = '"+str(net)+"' and nst between '"+str(minNst)+"' and '"+str(maxNst)+"'"
    cursor.execute(query)
    result = cursor.fetchall()
    maxQuery = "Select count(*) from Earthquake where net = '"+str(net)+"' and nst between '"+str(minNst)+"' and '"+str(maxNst)+"'"
    cursor.execute(maxQuery)
    countResult = cursor.fetchall()
    count = countResult[0][0]
    list_a = []
    list_a.append(['nst','gap'])
    for i in range(0, int(count)):
        list_a.append([result[i][0], result[i][1]])
    return render_template('practise3.html', list_a=list_a, count=count)

	 <center>
          <div id="scatterchart" style="width: 600px; height: 800px;"></div>
      </center>

 

      <br>
      <br>
    </div>
        <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
        <script type="text/javascript">
          google.charts.load('current', {'packages':['corechart']});
          google.charts.setOnLoadCallback(drawChart);

 

          function drawChart() {

 

            var data = google.visualization.arrayToDataTable({{ list_a|safe }});

 

            var options = {
                title: ' Scatter chart showing nst and gap',
                hAxis: {title: 'nst'},
                vAxis: {title: 'gap'},
                'width': 550,
                'height': 400
            };
            var chart = new google.visualization.ScatterChart(document.getElementById('scatterchart'));

 

            chart.draw(data, options);
          }
        </script>

 11. When you are finished with any part, please submit a link (a link to your Azure app) 
     to Teams, and we will try to demo it, then when you are FINISHED 
     (or at the end of the class) please submit code to Teams, and terminate your app.

 Good Luck!   

